@page "/canvasdrawing"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inject IJSRuntime jsRuntime

<div @ref="divCanvas" @onclick="OnClick">
    <BECanvas @ref="myCanvas" Height="800" Width="800"></BECanvas>
</div>

<h3>Canvas Drawing</h3>

@code {
    ElementReference divCanvas;
    BECanvas myCanvas;
    Canvas2DContext currentCanvasContext;

    class PieChartSlice
    {
        public string Name { get; set; }
        public double PercentageOfSlice { get; set; }
        public string ColorOfSlice { get; set; }
        public double LabelX { get; set; }
        public double LabelY { get; set; }

    }

    async void OnClick(MouseEventArgs eventArgs)
    {
        double mouseX = 0;
        double mouseY = 0;

        List<PieChartSlice> pieChartData = new List<PieChartSlice>();

        if (divCanvas.Id?.Length > 0)
        {
            string data = await jsRuntime.InvokeAsync<string>("getDivCanvasOffsets",
                new object[] { divCanvas });
            JObject offsets = (JObject)JsonConvert.DeserializeObject(data);
            mouseX = eventArgs.ClientX - offsets.Value<double>("offsetLeft");
            mouseY = eventArgs.ClientY - offsets.Value<double>("offsetTop");

            currentCanvasContext = await myCanvas.CreateCanvas2DAsync();

            await currentCanvasContext.ClearRectAsync(0, 0, 800, 800);
            await currentCanvasContext.SetFillStyleAsync("Red");
            await currentCanvasContext.FillRectAsync(mouseX, mouseY, 5, 5);
            await currentCanvasContext.StrokeTextAsync("ClientX: " + mouseX +
                "   ClientY: " + mouseY, 20, 20);

            pieChartData.Add(new PieChartSlice
            {
                Name = "Iyad's Company",
                PercentageOfSlice = 50,
                ColorOfSlice = "Blue",
                LabelX = 287,
                LabelY = 459
            });
            pieChartData.Add(new PieChartSlice
            {
                Name = "Gaby's Company",
                PercentageOfSlice = 30,
                ColorOfSlice = "Red",
                LabelX = 200,
                LabelY = 260
            });
            pieChartData.Add(new PieChartSlice
            {
                Name = "Rami's Company",
                PercentageOfSlice = 20,
                ColorOfSlice = "Green",
                LabelX = 400,
                LabelY = 280
            });

            if (myCanvas != null && currentCanvasContext != null)
            {
                await currentCanvasContext.SaveAsync();
                await currentCanvasContext.SetFillStyleAsync("Black");
                await currentCanvasContext.SetFontAsync("15pt Ariel");
                await currentCanvasContext.FillTextAsync(
                    "Widget Industry Market Share Breakup %", 160, 120);
                await currentCanvasContext.SetFontAsync("12pt Ariel");
                await currentCanvasContext.SetStrokeStyleAsync("Black");
                double currentAngle = 0;
                double lastAngle = 0;

                for (int i = 0; i < pieChartData.Count; i++)
                {
                    currentAngle += (pieChartData[i].PercentageOfSlice * 360) / 100;
                    await currentCanvasContext.SetFillStyleAsync(
                        pieChartData[i].ColorOfSlice);
                    await currentCanvasContext.BeginPathAsync();
                    await currentCanvasContext.MoveToAsync(350, 350);
                    await currentCanvasContext.ArcAsync(350, 350, 200,
                        (Math.PI / 180) * lastAngle,
                        (Math.PI / 180) * currentAngle, false);
                    await currentCanvasContext.ClosePathAsync();
                    await currentCanvasContext.FillAsync();
                    await currentCanvasContext.StrokeTextAsync(pieChartData[i].Name,
                        pieChartData[i].LabelX, pieChartData[i].LabelY);

                    lastAngle = currentAngle;

                }
                await currentCanvasContext.RestoreAsync();
            }
        }
    }
}
